/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tl.rpc.base;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseData implements org.apache.thrift.TBase<BaseData, BaseData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ZODIAC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zodiacCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COLOR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("colorCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseDataTupleSchemeFactory());
  }

  public String id; // required
  public int stage; // required
  public int number; // required
  public int year; // required
  public String zodiacCode; // required
  public String colorCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STAGE((short)2, "stage"),
    NUMBER((short)3, "number"),
    YEAR((short)4, "year"),
    ZODIAC_CODE((short)5, "zodiacCode"),
    COLOR_CODE((short)6, "colorCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STAGE
          return STAGE;
        case 3: // NUMBER
          return NUMBER;
        case 4: // YEAR
          return YEAR;
        case 5: // ZODIAC_CODE
          return ZODIAC_CODE;
        case 6: // COLOR_CODE
          return COLOR_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAGE_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __YEAR_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZODIAC_CODE, new org.apache.thrift.meta_data.FieldMetaData("zodiacCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLOR_CODE, new org.apache.thrift.meta_data.FieldMetaData("colorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseData.class, metaDataMap);
  }

  public BaseData() {
  }

  public BaseData(
    String id,
    int stage,
    int number,
    int year,
    String zodiacCode,
    String colorCode)
  {
    this();
    this.id = id;
    this.stage = stage;
    setStageIsSet(true);
    this.number = number;
    setNumberIsSet(true);
    this.year = year;
    setYearIsSet(true);
    this.zodiacCode = zodiacCode;
    this.colorCode = colorCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseData(BaseData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.stage = other.stage;
    this.number = other.number;
    this.year = other.year;
    if (other.isSetZodiacCode()) {
      this.zodiacCode = other.zodiacCode;
    }
    if (other.isSetColorCode()) {
      this.colorCode = other.colorCode;
    }
  }

  public BaseData deepCopy() {
    return new BaseData(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setStageIsSet(false);
    this.stage = 0;
    setNumberIsSet(false);
    this.number = 0;
    setYearIsSet(false);
    this.year = 0;
    this.zodiacCode = null;
    this.colorCode = null;
  }

  public String getId() {
    return this.id;
  }

  public BaseData setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getStage() {
    return this.stage;
  }

  public BaseData setStage(int stage) {
    this.stage = stage;
    setStageIsSet(true);
    return this;
  }

  public void unsetStage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGE_ISSET_ID);
  }

  public void setStageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGE_ISSET_ID, value);
  }

  public int getNumber() {
    return this.number;
  }

  public BaseData setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public int getYear() {
    return this.year;
  }

  public BaseData setYear(int year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public String getZodiacCode() {
    return this.zodiacCode;
  }

  public BaseData setZodiacCode(String zodiacCode) {
    this.zodiacCode = zodiacCode;
    return this;
  }

  public void unsetZodiacCode() {
    this.zodiacCode = null;
  }

  /** Returns true if field zodiacCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZodiacCode() {
    return this.zodiacCode != null;
  }

  public void setZodiacCodeIsSet(boolean value) {
    if (!value) {
      this.zodiacCode = null;
    }
  }

  public String getColorCode() {
    return this.colorCode;
  }

  public BaseData setColorCode(String colorCode) {
    this.colorCode = colorCode;
    return this;
  }

  public void unsetColorCode() {
    this.colorCode = null;
  }

  /** Returns true if field colorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetColorCode() {
    return this.colorCode != null;
  }

  public void setColorCodeIsSet(boolean value) {
    if (!value) {
      this.colorCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((Integer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Integer)value);
      }
      break;

    case ZODIAC_CODE:
      if (value == null) {
        unsetZodiacCode();
      } else {
        setZodiacCode((String)value);
      }
      break;

    case COLOR_CODE:
      if (value == null) {
        unsetColorCode();
      } else {
        setColorCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STAGE:
      return Integer.valueOf(getStage());

    case NUMBER:
      return Integer.valueOf(getNumber());

    case YEAR:
      return Integer.valueOf(getYear());

    case ZODIAC_CODE:
      return getZodiacCode();

    case COLOR_CODE:
      return getColorCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STAGE:
      return isSetStage();
    case NUMBER:
      return isSetNumber();
    case YEAR:
      return isSetYear();
    case ZODIAC_CODE:
      return isSetZodiacCode();
    case COLOR_CODE:
      return isSetColorCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseData)
      return this.equals((BaseData)that);
    return false;
  }

  public boolean equals(BaseData that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_stage = true;
    boolean that_present_stage = true;
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (this.stage != that.stage)
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_zodiacCode = true && this.isSetZodiacCode();
    boolean that_present_zodiacCode = true && that.isSetZodiacCode();
    if (this_present_zodiacCode || that_present_zodiacCode) {
      if (!(this_present_zodiacCode && that_present_zodiacCode))
        return false;
      if (!this.zodiacCode.equals(that.zodiacCode))
        return false;
    }

    boolean this_present_colorCode = true && this.isSetColorCode();
    boolean that_present_colorCode = true && that.isSetColorCode();
    if (this_present_colorCode || that_present_colorCode) {
      if (!(this_present_colorCode && that_present_colorCode))
        return false;
      if (!this.colorCode.equals(that.colorCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BaseData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BaseData typedOther = (BaseData)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(typedOther.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, typedOther.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(typedOther.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, typedOther.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZodiacCode()).compareTo(typedOther.isSetZodiacCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZodiacCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zodiacCode, typedOther.zodiacCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColorCode()).compareTo(typedOther.isSetColorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colorCode, typedOther.colorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseData(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stage:");
    sb.append(this.stage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zodiacCode:");
    if (this.zodiacCode == null) {
      sb.append("null");
    } else {
      sb.append(this.zodiacCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colorCode:");
    if (this.colorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.colorCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseDataStandardSchemeFactory implements SchemeFactory {
    public BaseDataStandardScheme getScheme() {
      return new BaseDataStandardScheme();
    }
  }

  private static class BaseDataStandardScheme extends StandardScheme<BaseData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stage = iprot.readI32();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.year = iprot.readI32();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ZODIAC_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zodiacCode = iprot.readString();
              struct.setZodiacCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLOR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colorCode = iprot.readString();
              struct.setColorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAGE_FIELD_DESC);
      oprot.writeI32(struct.stage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI32(struct.year);
      oprot.writeFieldEnd();
      if (struct.zodiacCode != null) {
        oprot.writeFieldBegin(ZODIAC_CODE_FIELD_DESC);
        oprot.writeString(struct.zodiacCode);
        oprot.writeFieldEnd();
      }
      if (struct.colorCode != null) {
        oprot.writeFieldBegin(COLOR_CODE_FIELD_DESC);
        oprot.writeString(struct.colorCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseDataTupleSchemeFactory implements SchemeFactory {
    public BaseDataTupleScheme getScheme() {
      return new BaseDataTupleScheme();
    }
  }

  private static class BaseDataTupleScheme extends TupleScheme<BaseData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStage()) {
        optionals.set(1);
      }
      if (struct.isSetNumber()) {
        optionals.set(2);
      }
      if (struct.isSetYear()) {
        optionals.set(3);
      }
      if (struct.isSetZodiacCode()) {
        optionals.set(4);
      }
      if (struct.isSetColorCode()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetStage()) {
        oprot.writeI32(struct.stage);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetYear()) {
        oprot.writeI32(struct.year);
      }
      if (struct.isSetZodiacCode()) {
        oprot.writeString(struct.zodiacCode);
      }
      if (struct.isSetColorCode()) {
        oprot.writeString(struct.colorCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stage = iprot.readI32();
        struct.setStageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.year = iprot.readI32();
        struct.setYearIsSet(true);
      }
      if (incoming.get(4)) {
        struct.zodiacCode = iprot.readString();
        struct.setZodiacCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.colorCode = iprot.readString();
        struct.setColorCodeIsSet(true);
      }
    }
  }

}

